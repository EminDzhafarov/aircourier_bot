from aiogram import Router
from aiogram.filters import Command
from aiogram.filters.text import Text
from aiogram.types import Message, ReplyKeyboardRemove, CallbackQuery
from aiogram.fsm.context import FSMContext
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession
from db.models import Courier, Stats, Stats_search
from states.sender_states import SenderStates
from utils.misc.validators import isvalid_name, isvalid_city, isvalid_info
from keyboards.citypicker import get_country_keyboard, city_keyboard, cities_by_country
from datetime import datetime

router = Router()

@router.message(Text(text="üì¶ –•–æ—á—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å", ignore_case=True))
async def answer_yes(message: Message, state: FSMContext):
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–∫—É–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—ã–ª–∫—É.",
        reply_markup=get_country_keyboard()
    )
    await state.set_state(SenderStates.waiting_for_country_from)

@router.message(SenderStates.waiting_for_country_from)
async def country_from(message: Message, state: FSMContext):
    country = message.text.strip()
    if country in cities_by_country:
        await message.answer(f'–í—ã–±—Ä–∞–Ω–∞ —Å—Ç—Ä–∞–Ω–∞ {country}, —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –∫–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—ã–ª–∫—É.',
                             reply_markup=city_keyboard(country))
        await state.set_state(SenderStates.waiting_for_city_from)
    else:
        await message.answer('–°–µ—Ä–≤–∏—Å –ø–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–µ.')

@router.message(SenderStates.waiting_for_city_from)
async def city_from(message: Message, state: FSMContext):
    city = message.text.strip()
    if isvalid_city(city):
        await state.update_data(city_from=city)
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≤ –∫–∞–∫—É—é —Å—Ç—Ä–∞–Ω—É —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—ã–ª–∫—É.', reply_markup=get_country_keyboard())
        await state.set_state(SenderStates.waiting_for_country_to)
    else:
        await message.answer('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ –∏–ª–∏ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã.')

@router.message(SenderStates.waiting_for_country_to)
async def country_to(message: Message, state: FSMContext):
    country = message.text.strip()
    if country in cities_by_country:
        await message.answer(f'–í—ã–±—Ä–∞–Ω–∞ —Å—Ç—Ä–∞–Ω–∞ {country}, —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤ –∫–∞–∫–æ–π –≥–æ—Ä–æ–¥ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—ã–ª–∫—É.', \
                             reply_markup=city_keyboard(country))
        await state.set_state(SenderStates.waiting_for_city_to)
    else:
        await message.answer('–°–µ—Ä–≤–∏—Å –ø–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–µ.')

@router.message(SenderStates.waiting_for_city_to)
async def city_to(message: Message, state: FSMContext, session: AsyncSession):
    city = message.text.strip()
    data = await state.get_data()
    if city != data['city_from']:
        if isvalid_city(city):
            await state.update_data(city_to=city)
            data = await state.get_data()
            today = datetime.today()
            query = (await session.execute(select(Courier).where(Courier.city == data['city_from']).where(Courier.dest == data['city_to']) \
                    .where(Courier.flight_date >= today).where(Courier.status == True) \
                    .order_by(Courier.flight_date))).all()
            if query:
                await message.answer('–í–æ—Ç —á—Ç–æ –º–Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏:', \
                                     reply_markup=ReplyKeyboardRemove())
                for courier in query:
                    await message.answer(f'<b>–î–∞—Ç–∞: {courier.flight_date.strftime("%d.%m.%Y")}</b>\n'
                                         f'–ò–º—è: <a href="tg://user?id={courier.user_id}">{courier.user_name}</a>\n' \
                                         f'–ö–æ–Ω—Ç–∞–∫—Ç: {courier.phone}\n' \
                                         f'–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: {courier.extra}', \
                                         parse_mode='HTML')
            else:
                await message.answer('–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ :(')
            await session.commit()
        await state.clear()