from aiogram import Router
from aiogram.filters.text import Text
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession
from db.crud import find_couriers, add_search_stat
from filters.blacklist import BlacklistFilter
from states.sender_states import SenderStates
from utils.misc.validators import isvalid_city
from keyboards.citypicker import get_country_keyboard, city_keyboard, cities_by_country
from keyboards.start import get_to_search_kb
from keyboards.inline import send_msg

router = Router()


@router.message(Text(text="–ù–æ–≤—ã–π –ø–æ–∏—Å–∫", ignore_case=True), BlacklistFilter())
@router.message(Text(text="üì¶ –•–æ—á—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å", ignore_case=True), BlacklistFilter())
async def answer_yes(message: Message, state: FSMContext):
    """
    –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç—Ä–∞–Ω—ã –≤—ã–ª–µ—Ç–∞ –∫—É—Ä—å–µ—Ä–∞
    :param message:
    :param state:
    :return:
    """
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–∫—É–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—ã–ª–∫—É.", reply_markup=get_country_keyboard())
    await state.set_state(SenderStates.waiting_for_country_from)


@router.message(SenderStates.waiting_for_country_from)
async def country_from(message: Message, state: FSMContext):
    """
    –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –≥–æ—Ä–æ–¥–∞ –≤—ã–ª–µ—Ç–∞ –∫—É—Ä—å–µ—Ä–∞
    :param message:
    :param state:
    :return:
    """
    country = message.text.strip()
    if country in cities_by_country:
        await message.answer(f'–í—ã–±—Ä–∞–Ω–∞ —Å—Ç—Ä–∞–Ω–∞ {country}, —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ –∫–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—ã–ª–∫—É.',
                             reply_markup=city_keyboard(country))
        await state.set_state(SenderStates.waiting_for_city_from)
    else:
        await message.answer('–°–µ—Ä–≤–∏—Å –ø–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–µ.')


@router.message(SenderStates.waiting_for_city_from)
async def city_from(message: Message, state: FSMContext):
    """
    –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç—Ä–∞–Ω—ã –ø—Ä–∏–ª–µ—Ç–∞ –∫—É—Ä—å–µ—Ä–∞
    :param message:
    :param state:
    :return:
    """
    city = message.text.strip()
    if city != "–ù–∞–∑–∞–¥":
        if isvalid_city(city):
            await state.update_data(user_id=message.from_user.id, city_from=city)
            await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≤ –∫–∞–∫—É—é —Å—Ç—Ä–∞–Ω—É —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—ã–ª–∫—É.',
                                 reply_markup=get_country_keyboard())
            await state.set_state(SenderStates.waiting_for_country_to)
        else:
            await message.answer('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–µ –∏–ª–∏ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –±—É–∫–≤—ã.')
    else:
        await state.set_state(SenderStates.waiting_for_country_from)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–∫—É–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—ã–ª–∫—É.", reply_markup=get_country_keyboard())


@router.message(SenderStates.waiting_for_country_to)
async def country_to(message: Message, state: FSMContext):
    """
    –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≥–æ—Ä–æ–¥–∞ –ø—Ä–∏–ª–µ—Ç–∞ –∫—É—Ä—å–µ—Ä–∞
    :param message:
    :param state:
    :return:
    """
    country = message.text.strip()
    if country in cities_by_country:
        await message.answer(f'–í—ã–±—Ä–∞–Ω–∞ —Å—Ç—Ä–∞–Ω–∞ {country}, —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤ –∫–∞–∫–æ–π –≥–æ—Ä–æ–¥ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—ã–ª–∫—É.',
                             reply_markup=city_keyboard(country))
        await state.set_state(SenderStates.waiting_for_city_to)
    else:
        await message.answer('–°–µ—Ä–≤–∏—Å –ø–æ–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–µ.')


@router.message(SenderStates.waiting_for_city_to)
async def city_to(message: Message, state: FSMContext, session: AsyncSession):
    """
    –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫—É—Ä—å–µ—Ä–∞ –ø–æ –ø–æ–ª—É—á–µ–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º –∏–∑ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
    :param message:
    :param state:
    :param session:
    :return:
    """
    city = message.text.strip()
    if city != "–ù–∞–∑–∞–¥":
        data = await state.get_data()
        if city != data['city_from']:
            if isvalid_city(city):
                await state.update_data(city_to=city)
                data = await state.get_data()
                await add_search_stat(session, data)
                couriers = await find_couriers(session, data)
                if couriers:
                    await message.answer('–í–æ—Ç —á—Ç–æ –º–Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏:', reply_markup=get_to_search_kb())
                    for courier in couriers:
                        await message.answer(f'<b>–î–∞—Ç–∞: {courier.flight_date.strftime("%d.%m.%Y")}</b>\n'
                                             f'<b>–ò–º—è:</b> <a href="tg://user?id={courier.user_id}">'
                                             f'{courier.user_name}</a>\n'
                                             f'<b>–ö–æ–Ω—Ç–∞–∫—Ç:</b> {courier.phone}\n'
                                             f'<b>–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:</b> {courier.info}',
                                             reply_markup=send_msg(courier.phone))
                    await message.answer("–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∫—É—Ä—å–µ—Ä—ã –∑–∞–ø—Ä–µ—â–∞—é—Ç –ø–∏—Å–∞—Ç—å —Å–µ–±–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ "
                                         "–ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç–∏, –Ω–æ –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∏—Ö –≤ –∫–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ "
                                         "–∏–ª–∏ –ø–æ–∑–≤–æ–Ω–∏—Ç—å.")
                else:
                    await message.answer('–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ :(', reply_markup=get_to_search_kb())
            await state.clear()
        else:
            await message.answer('–ì–æ—Ä–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã —Ä–∞–∑–ª–∏—á–∞—Ç—å—Å—è.')
    else:
        await state.set_state(SenderStates.waiting_for_country_to)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫—É–¥–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å—ã–ª–∫—É.", reply_markup=get_country_keyboard())
